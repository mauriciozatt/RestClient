unit uServer;

// EMS Resource Module

interface

uses
  System.SysUtils, System.Classes, System.JSON,
  EMS.Services, EMS.ResourceAPI, EMS.ResourceTypes, FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf,
  FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys,
  FireDAC.Phys.IB, FireDAC.Phys.IBDef, FireDAC.ConsoleUI.Wait,
  FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt,
  EMS.DataSetResource, Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client;

type

  [ResourceName('RestCustumers')]
  TRestCustumersResource1 = class(TDataModule)
    FDConnection1: TFDConnection;
    qryCUSTOMER: TFDQuery;
    [ResourceSuffix('CUSTOMER')]
    dsrCUSTOMER: TEMSDataSetResource;
    vQryDeleteCustumer: TFDQuery;
    vQryDeleteSales: TFDQuery;
    qryInserir: TFDQuery;
    QryAtualizar: TFDQuery;
    QryConsulta: TFDQuery;

  published

    [EndPointRequestSummary('Tests', 'ListItems', 'Retrieves list of items',
      'application/json', '')]
    [EndPointResponseDetails(200, 'Ok', TAPIDoc.TPrimitiveType.spObject,
      TAPIDoc.TPrimitiveFormat.None, '', '')]
    procedure Get(const AContext: TEndpointContext;
      const ARequest: TEndpointRequest; const AResponse: TEndpointResponse);

    [EndPointRequestSummary('Tests', 'GetItem',
      'Retrieves item with specified ID', 'application/json', '')]
    [EndPointRequestParameter(TAPIDocParameter.TParameterIn.Path, 'item',
      'A item ID', true, TAPIDoc.TPrimitiveType.spString,
      TAPIDoc.TPrimitiveFormat.None, TAPIDoc.TPrimitiveType.spString, '', '')]
    [EndPointResponseDetails(200, 'Ok', TAPIDoc.TPrimitiveType.spObject,
      TAPIDoc.TPrimitiveFormat.None, '', '')]
    [EndPointResponseDetails(404, 'Not Found', TAPIDoc.TPrimitiveType.spNull,
      TAPIDoc.TPrimitiveFormat.None, '', '')]
    [ResourceSuffix('{item}')]
    procedure GetItem(const AContext: TEndpointContext;
      const ARequest: TEndpointRequest; const AResponse: TEndpointResponse);

    [EndPointRequestSummary('Tests', 'PostItem', 'Creates new item', '',
      'application/json')]
    [EndPointRequestParameter(TAPIDocParameter.TParameterIn.Body, 'body',
      'A new item content', true, TAPIDoc.TPrimitiveType.spObject,
      TAPIDoc.TPrimitiveFormat.None, TAPIDoc.TPrimitiveType.spObject, '', '')]
    [EndPointResponseDetails(200, 'Ok', TAPIDoc.TPrimitiveType.spNull,
      TAPIDoc.TPrimitiveFormat.None, '', '')]
    [EndPointResponseDetails(409, 'Item Exist', TAPIDoc.TPrimitiveType.spNull,
      TAPIDoc.TPrimitiveFormat.None, '', '')]
    procedure Post(const AContext: TEndpointContext;
      const ARequest: TEndpointRequest; const AResponse: TEndpointResponse);

    [EndPointRequestSummary('Tests', 'PutItem',
      'Updates item with specified ID', '', 'application/json')]
    [EndPointRequestParameter(TAPIDocParameter.TParameterIn.Path, 'item',
      'A item ID', true, TAPIDoc.TPrimitiveType.spString,
      TAPIDoc.TPrimitiveFormat.None, TAPIDoc.TPrimitiveType.spString, '', '')]
    [EndPointRequestParameter(TAPIDocParameter.TParameterIn.Body, 'body',
      'A item changes', true, TAPIDoc.TPrimitiveType.spObject,
      TAPIDoc.TPrimitiveFormat.None, TAPIDoc.TPrimitiveType.spObject, '', '')]
    [EndPointResponseDetails(200, 'Ok', TAPIDoc.TPrimitiveType.spNull,
      TAPIDoc.TPrimitiveFormat.None, '', '')]
    [EndPointResponseDetails(404, 'Not Found', TAPIDoc.TPrimitiveType.spNull,
      TAPIDoc.TPrimitiveFormat.None, '', '')]
    [ResourceSuffix('{item}')]
    procedure PutItem(const AContext: TEndpointContext;
      const ARequest: TEndpointRequest; const AResponse: TEndpointResponse);

    [EndPointRequestSummary('Tests', 'DeleteItem',
      'Deletes item with specified ID', '', '')]
    [EndPointRequestParameter(TAPIDocParameter.TParameterIn.Path, 'item',
      'A item ID', true, TAPIDoc.TPrimitiveType.spString,
      TAPIDoc.TPrimitiveFormat.None, TAPIDoc.TPrimitiveType.spString, '', '')]
    [EndPointResponseDetails(200, 'Ok', TAPIDoc.TPrimitiveType.spNull,
      TAPIDoc.TPrimitiveFormat.None, '', '')]
    [EndPointResponseDetails(404, 'Not Found', TAPIDoc.TPrimitiveType.spNull,
      TAPIDoc.TPrimitiveFormat.None, '', '')]
    [ResourceSuffix('{item}')]
    procedure DeleteItem(const AContext: TEndpointContext;
      const ARequest: TEndpointRequest; const AResponse: TEndpointResponse);
  end;

implementation

{%CLASSGROUP 'System.Classes.TPersistent'}

uses uJSONHelper;

{$R *.dfm}

procedure TRestCustumersResource1.Get(const AContext: TEndpointContext;
  const ARequest: TEndpointRequest; const AResponse: TEndpointResponse);
begin
  // serializar dados para json;;
  AResponse.Body.SetStream(qryCUSTOMER.AsJSONStream, 'application/json', true);
end;

procedure TRestCustumersResource1.GetItem(const AContext: TEndpointContext;
  const ARequest: TEndpointRequest; const AResponse: TEndpointResponse);
var
  LItem: string;
begin
  LItem := ARequest.Params.Values['item'];
  // Sample code
  AResponse.Body.SetValue(TJSONString.Create('RestCustumers ' + LItem), true)
end;

procedure TRestCustumersResource1.Post(const AContext: TEndpointContext;
  const ARequest: TEndpointRequest; const AResponse: TEndpointResponse);
begin
end;

/// inserir / edita
procedure TRestCustumersResource1.PutItem(const AContext: TEndpointContext;
  const ARequest: TEndpointRequest; const AResponse: TEndpointResponse);
var
  CUST_NO, CUSTOMER, CONTACT_FIRST, CONTACT_LAST, PHONE_NO, ADDRESS_LINE1,
    ADDRESS_LINE2, CITY, STATE_PROVINCE, COUNTRY, POSTAL_CODE, ON_HOLD: String;

  jParametros: TJSONObject;
begin
  CUST_NO := '';
  CUSTOMER := '';
  CONTACT_FIRST := '';
  CONTACT_LAST := '';
  PHONE_NO := '';
  ADDRESS_LINE1 := '';
  ADDRESS_LINE2 := '';
  CITY := '';
  STATE_PROVINCE := '';
  COUNTRY := '';
  POSTAL_CODE := '';
  ON_HOLD := '';

  if not ARequest.Body.TryGetObject(jParametros) then
  begin
    AResponse.StatusCode := 400;
    Exit;
  end;

  CUST_NO := jParametros.GetValue('CUST_NO').Value;
  CUSTOMER := jParametros.GetValue('COSTUMER').Value;
  CONTACT_FIRST := jParametros.GetValue('CONTACT_FIRST').Value;
  CONTACT_LAST := jParametros.GetValue('CONTACT_LAST').Value;
  PHONE_NO := jParametros.GetValue('PHONE_NO').Value;
  ADDRESS_LINE1 := jParametros.GetValue('ADDRESS_LINE1').Value;
  ADDRESS_LINE2 := jParametros.GetValue('ADDRESS_LINE2').Value;
  CITY := jParametros.GetValue('CITY').Value;
  STATE_PROVINCE := jParametros.GetValue('STATE_PROVINCE').Value;
  COUNTRY := jParametros.GetValue('COUNTRY').Value;
  POSTAL_CODE := jParametros.GetValue('POSTAL_CODE').Value;
  ON_HOLD := jParametros.GetValue('ON_HOLD').Value;

  QryConsulta.Params[0].AsString := CUST_NO;
  QryConsulta.Close;
  QryConsulta.Open();

  if QryConsulta.IsEmpty then
  begin
    // insere
    qryInserir.Close;
    qryInserir.Params[0].AsString := CUST_NO;
    qryInserir.Params[1].AsString := CUSTOMER;
    qryInserir.Params[2].AsString := CONTACT_FIRST;
    qryInserir.Params[3].AsString := CONTACT_LAST;
    qryInserir.Params[4].AsString := PHONE_NO;
    qryInserir.Params[5].AsString := ADDRESS_LINE1;
    qryInserir.Params[6].AsString := ADDRESS_LINE2;
    qryInserir.Params[7].AsString := CITY;
    qryInserir.Params[8].AsString := STATE_PROVINCE;
    qryInserir.Params[9].AsString := COUNTRY;
    qryInserir.Params[10].AsString := POSTAL_CODE;
    qryInserir.Params[11].AsString := ON_HOLD;

    try
      qryInserir.ExecSQL;
      AResponse.Body.SetValue
        (TJSONString.Create('Inserido com sucesso!'), true);
    except
      AResponse.Body.SetValue(TJSONString.Create('erro ao inserir'), true);
    end;

  end
  else
  begin
    // Edita
    QryAtualizar.Close;
    QryAtualizar.Params[0].AsString := CUST_NO;
    QryAtualizar.Params[1].AsString := CUSTOMER;
    QryAtualizar.Params[2].AsString := CONTACT_FIRST;
    QryAtualizar.Params[3].AsString := CONTACT_LAST;
    QryAtualizar.Params[4].AsString := PHONE_NO;
    QryAtualizar.Params[5].AsString := ADDRESS_LINE1;
    QryAtualizar.Params[6].AsString := ADDRESS_LINE2;
    QryAtualizar.Params[7].AsString := CITY;
    QryAtualizar.Params[8].AsString := STATE_PROVINCE;
    QryAtualizar.Params[9].AsString := COUNTRY;
    QryAtualizar.Params[10].AsString := POSTAL_CODE;
    QryAtualizar.Params[11].AsString := ON_HOLD;

    try
      QryAtualizar.ExecSQL;
      AResponse.Body.SetValue(TJSONString.Create('Editado com sucesso!'), true);
    except
      AResponse.Body.SetValue(TJSONString.Create('erro ao editar'), true);
    end;

  end;

end;

// deletar item
procedure TRestCustumersResource1.DeleteItem(const AContext: TEndpointContext;
  const ARequest: TEndpointRequest; const AResponse: TEndpointResponse);
var
  LItem: string;
begin
  LItem := ARequest.Params.Values['item'];

  // DELETA VENDAS RELACIONADAS AO CLIENTE
  vQryDeleteSales.ParamByName('CUST_NO').AsInteger := LItem.ToInteger;
  vQryDeleteSales.ExecSQL;
  FDConnection1.Commit;

  // DELETA CLIENTE
  vQryDeleteCustumer.ParamByName('CUST_NO').AsInteger := LItem.ToInteger;
  vQryDeleteCustumer.ExecSQL;
  FDConnection1.Commit;

  qryCUSTOMER.Close;
  qryCUSTOMER.Open();

  AResponse.Body.SetValue(TJSONString.Create('Deletado com sucesso!'), true);

end;

procedure Register;
begin
  RegisterResource(TypeInfo(TRestCustumersResource1));
end;

initialization

Register;

end.
